// lib/models/weather_model.dart

import 'package:json_annotation/json_annotation.dart';

part 'weather_model.g.dart'; // This line will be generated by build_runner

@JsonSerializable()
class Weather {
  // Weather condition
  @JsonKey(name: 'code')
  final int? conditionCode;
  @JsonKey(name: 'text')
  final String? conditionText;
  @JsonKey(name: 'icon')
  final String? iconUrl; // Direct URL to the weather icon

  // Main weather data
  @JsonKey(name: 'temp_c')
  final double? temperature;
  @JsonKey(name: 'feelslike_c')
  final double? feelsLike;
  @JsonKey(name: 'maxtemp_c')
  final double? tempMax;
  @JsonKey(name: 'mintemp_c')
  final double? tempMin;
  @JsonKey(name: 'pressure_mb')
  final double? pressure;
  final int? humidity;
  @JsonKey(name: 'vis_km')
  final double? visibilityKm;

  // Wind data
  @JsonKey(name: 'wind_kph')
  final double? windSpeedKph;
  @JsonKey(name: 'wind_degree')
  final int? windDegrees;

  // Cloudiness
  @JsonKey(name: 'cloud')
  final int? clouds;

  // Precipitation (Rain/Snow combined)
  @JsonKey(name: 'precip_mm')
  final double? precipitationMm;

  // System data (sunrise, sunset from forecast.forecastday[0].astro)
  @JsonKey(name: 'sunrise_time')
  final String? sunriseTime;
  @JsonKey(name: 'sunset_time')
  final String? sunsetTime;

  // Location and Time information
  @JsonKey(name: 'name')
  final String? cityName;
  @JsonKey(name: 'lat')
  final double? lat;
  @JsonKey(name: 'lon')
  final double? lon;
  @JsonKey(name: 'tz_id')
  final String? timezoneId;
  @JsonKey(name: 'last_updated_epoch')
  final int? lastUpdatedEpoch;

  // To check if it's day or night for icon selection (1=day, 0=night)
  @JsonKey(name: 'is_day')
  final int? isDay;

  Weather({
    this.conditionCode,
    this.conditionText,
    this.iconUrl,
    this.temperature,
    this.feelsLike,
    this.tempMax,
    this.tempMin,
    this.pressure,
    this.humidity,
    this.visibilityKm,
    this.windSpeedKph,
    this.windDegrees,
    this.clouds,
    this.precipitationMm,
    this.sunriseTime,
    this.sunsetTime,
    this.cityName,
    this.lat,
    this.lon,
    this.timezoneId,
    this.lastUpdatedEpoch,
    this.isDay,
  });

  // Custom factory constructor to parse the nested WeatherAPI.com response
  factory Weather.fromJson(Map<String, dynamic> json) {
    // Extract location data
    final locationJson = json['location'] as Map<String, dynamic>;
    // Extract current weather data
    final currentJson = json['current'] as Map<String, dynamic>;
    // Extract forecast data for today (first day)
    final forecastDayJson = json['forecast']['forecastday'][0] as Map<String, dynamic>;
    final dayJson = forecastDayJson['day'] as Map<String, dynamic>;
    final astroJson = forecastDayJson['astro'] as Map<String, dynamic>;

    // *** CRITICAL FIX HERE: Safely convert icon to String before processing ***
    String? rawIcon = currentJson['condition']['icon']?.toString();
    String? processedIconUrl;
    if (rawIcon != null && rawIcon.startsWith('//')) {
      processedIconUrl = 'https:$rawIcon';
    } else {
      processedIconUrl = rawIcon; // Use as is if not starting with '//' or if it's null/empty
    }

    // Parse the data into the Weather model
    return Weather(
      conditionCode: currentJson['condition']['code'] as int?,
      conditionText: currentJson['condition']['text'] as String?,
      iconUrl: processedIconUrl, // Use the safely processed icon URL
      temperature: currentJson['temp_c'] as double?,
      feelsLike: currentJson['feelslike_c'] as double?,
      tempMax: dayJson['maxtemp_c'] as double?, // From daily forecast
      tempMin: dayJson['mintemp_c'] as double?, // From daily forecast
      pressure: currentJson['pressure_mb'] as double?,
      humidity: currentJson['humidity'] as int?,
      visibilityKm: currentJson['vis_km'] as double?,
      windSpeedKph: currentJson['wind_kph'] as double?,
      windDegrees: currentJson['wind_degree'] as int?,
      clouds: currentJson['cloud'] as int?,
      precipitationMm: currentJson['precip_mm'] as double?,
      sunriseTime: astroJson['sunrise'] as String?, // From daily forecast
      sunsetTime: astroJson['sunset'] as String?, // From daily forecast
      cityName: locationJson['name'] as String?,
      lat: locationJson['lat'] as double?,
      lon: locationJson['lon'] as double?,
      timezoneId: locationJson['tz_id'] as String?,
      lastUpdatedEpoch: currentJson['last_updated_epoch'] as int?,
      isDay: currentJson['is_day'] as int?,
    );
  }

  // toJson method is not used in WeatherApiService for deserialization,
  // but keeping it for completeness if you need to serialize Weather objects.
  Map<String, dynamic> toJson() => _$WeatherToJson(this);
}