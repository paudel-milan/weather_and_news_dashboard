// lib/models/forecast_model.dart

import 'package:json_annotation/json_annotation.dart';
// import 'package:weather_and_news_app/models/weather_model.dart'; // No longer directly imported here as Weather is for current and its sub-models (Rain/Snow) are gone.

part 'forecast_model.g.dart'; // This line will be generated by build_runner

// No longer need a ForecastResponse wrapper for WeatherAPI.com
// The WeatherApiService will directly return List<DailyForecast> or List<HourlyForecast>

@JsonSerializable()
class HourlyForecast {
  @JsonKey(name: 'time_epoch')
  final int? timestamp; // Time of the forecasted data, Unix, UTC
  @JsonKey(name: 'time')
  final String? timeString; // Human-readable time string (e.g., "2025-07-05 00:00")

  // Temperature
  @JsonKey(name: 'temp_c')
  final double? tempC; // Temperature in Celsius
  @JsonKey(name: 'feelslike_c')
  final double? feelsLikeC; // Feels like temperature in Celsius

  // Atmospheric pressure
  @JsonKey(name: 'pressure_mb')
  final double? pressureMb; // Pressure in millibars

  // Humidity
  final int? humidity; // %

  // Dew Point
  @JsonKey(name: 'dewpoint_c')
  final double? dewPointC;

  // UV Index
  final double? uv;

  // Cloudiness
  @JsonKey(name: 'cloud')
  final int? clouds; // %

  // Visibility
  @JsonKey(name: 'vis_km')
  final double? visibilityKm; // Visibility in kilometers

  // Wind data
  @JsonKey(name: 'wind_kph')
  final double? windSpeedKph; // Wind speed in km/h
  @JsonKey(name: 'wind_degree')
  final int? windDegrees; // degrees (meteorological)
  @JsonKey(name: 'gust_kph')
  final double? windGustKph; // km/h

  // Precipitation
  @JsonKey(name: 'precip_mm')
  final double? precipitationMm; // Precipitation amount in millimeters
  @JsonKey(name: 'chance_of_rain')
  final int? chanceOfRain; // % chance of rain
  @JsonKey(name: 'chance_of_snow')
  final int? chanceOfSnow; // % chance of snow

  // Weather condition
  @JsonKey(name: 'condition')
  final WeatherCondition? condition;

  @JsonKey(name: 'is_day')
  final int? isDay; // 1 = Day, 0 = Night (for icon selection)

  HourlyForecast({
    this.timestamp,
    this.timeString,
    this.tempC,
    this.feelsLikeC,
    this.pressureMb,
    this.humidity,
    this.dewPointC,
    this.uv,
    this.clouds,
    this.visibilityKm,
    this.windSpeedKph,
    this.windDegrees,
    this.windGustKph,
    this.precipitationMm,
    this.chanceOfRain,
    this.chanceOfSnow,
    this.condition,
    this.isDay,
  });

  factory HourlyForecast.fromJson(Map<String, dynamic> json) => _$HourlyForecastFromJson(json);
  Map<String, dynamic> toJson() => _$HourlyForecastToJson(this);
}

// Represents the 'condition' object within hourly and daily forecasts
@JsonSerializable()
class WeatherCondition {
  @JsonKey(name: 'text')
  final String? text; // Weather condition description (e.g., "Partly cloudy")

  // *** CRITICAL FIX HERE: Use a custom fromJson converter for 'icon' ***
  @JsonKey(name: 'icon', fromJson: _iconFromJson)
  final String? icon; // Direct URL to the weather icon (e.g., "//cdn.weatherapi.com/...")

  @JsonKey(name: 'code')
  final int? code; // Weather condition code (e.g., 1000 for Clear)

  WeatherCondition({this.text, this.icon, this.code});

  factory WeatherCondition.fromJson(Map<String, dynamic> json) => _$WeatherConditionFromJson(json);
  Map<String, dynamic> toJson() => _$WeatherConditionToJson(this);

  // Helper getter to ensure https:// prefix for icon URLs
  String? get fullIconUrl {
    if (icon == null) return null;
    return icon!.startsWith('//') ? 'https:$icon' : icon;
  }

  // *** ADD THIS STATIC METHOD within WeatherCondition class ***
  static String? _iconFromJson(dynamic iconValue) {
    if (iconValue == null) return null;
    // Safely convert any value (int, double, etc.) to String.
    // This handles cases where the API might return an int (like 70) instead of a string URL.
    return iconValue.toString();
  }
}


// Specific model for Daily Forecast
@JsonSerializable()
class DailyForecast {
  @JsonKey(name: 'date_epoch')
  final int? timestamp; // Date of the forecast, Unix, UTC
  @JsonKey(name: 'date')
  final String? dateString; // Date string (e.g., "2025-07-05")

  // Daily summary (from the 'day' object)
  @JsonKey(name: 'day')
  final DaySummary? daySummary;

  // Astronomy data (from the 'astro' object)
  @JsonKey(name: 'astro')
  final Astro? astro;

  // Hourly forecast for this specific day
  @JsonKey(name: 'hour')
  final List<HourlyForecast>? hourlyForecasts;


  DailyForecast({
    this.timestamp,
    this.dateString,
    this.daySummary,
    this.astro,
    this.hourlyForecasts,
  });

  factory DailyForecast.fromJson(Map<String, dynamic> json) => _$DailyForecastFromJson(json);
  Map<String, dynamic> toJson() => _$DailyForecastToJson(this);
}

@JsonSerializable()
class DaySummary {
  @JsonKey(name: 'maxtemp_c')
  final double? maxTempC;
  @JsonKey(name: 'mintemp_c')
  final double? minTempC;
  @JsonKey(name: 'avgtemp_c')
  final double? avgTempC;
  @JsonKey(name: 'maxwind_kph')
  final double? maxWindKph;
  @JsonKey(name: 'totalprecip_mm')
  final double? totalPrecipMm;
  @JsonKey(name: 'avgvis_km')
  final double? avgVisibilityKm;
  @JsonKey(name: 'avghumidity')
  final double? avgHumidity;
  @JsonKey(name: 'uv')
  final double? uvIndex;
  @JsonKey(name: 'condition')
  final WeatherCondition? condition;
  @JsonKey(name: 'daily_chance_of_rain')
  final int? dailyChanceOfRain; // % chance of rain for the day
  @JsonKey(name: 'daily_chance_of_snow')
  final int? dailyChanceOfSnow; // % chance of snow for the day

  DaySummary({
    this.maxTempC,
    this.minTempC,
    this.avgTempC,
    this.maxWindKph,
    this.totalPrecipMm,
    this.avgVisibilityKm,
    this.avgHumidity,
    this.uvIndex,
    this.condition,
    this.dailyChanceOfRain,
    this.dailyChanceOfSnow,
  });

  factory DaySummary.fromJson(Map<String, dynamic> json) => _$DaySummaryFromJson(json);
  Map<String, dynamic> toJson() => _$DaySummaryToJson(this);
}

@JsonSerializable()
class Astro {
  final String? sunrise; // e.g., "05:00 AM"
  final String? sunset; // e.g., "07:00 PM"
  final String? moonrise;
  final String? moonset;
  @JsonKey(name: 'moon_phase')
  final String? moonPhase; // e.g., "Waxing Crescent"
  @JsonKey(name: 'moon_illumination')
  final String? moonIllumination; // e.g., "50" (percentage as string)

  Astro({
    this.sunrise,
    this.sunset,
    this.moonrise,
    this.moonset,
    this.moonPhase,
    this.moonIllumination,
  });

  factory Astro.fromJson(Map<String, dynamic> json) => _$AstroFromJson(json);
  Map<String, dynamic> toJson() => _$AstroToJson(this);
}

// Removed Rain and Snow classes as they are not needed for WeatherAPI.com's structure.
// Removed DailyTemp and DailyFeelsLike classes as their fields are directly in DaySummary.